name: Build qcom archlinuxarm

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        DEVICE: [lenovo-q706f]
    env: 
      BUILD_SH: 'sudo arch-chroot ./builder qemu-aarch64-static /usr/bin/bash -c'

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          echo RELEASE=$(date +%Y\/%m\/%d) >> $GITHUB_ENV
        shell: bash

      - name: generate builder
        run: |
          sudo apt update && sudo apt install qemu-user-static libarchive-tools arch-install-scripts git python3 
          sudo curl -L -o ./ArchLinuxARM-aarch64-latest.tar.gz http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz
          sudo mkdir ./builder
          sudo bsdtar -xpf ./ArchLinuxARM-aarch64-latest.tar.gz -C ./builder
          sudo mount --bind ./builder ./builder
          sudo cp /usr/bin/qemu-aarch64-static ./builder/usr/bin/qemu-aarch64-static
          sudo cp -f ./pacman.conf ./builder/etc/pacman.conf
          ${{ env.BUILD_SH }} "pacman -R --ask=4 linux-aarch64"
          ${{ env.BUILD_SH }} "pacman-key --init && pacman-key --populate archlinuxarm"
          ${{ env.BUILD_SH }} "pacman-key --recv-keys F60FD4C6D426DAB6"
          ${{ env.BUILD_SH }} "pacman-key --lsign F60FD4C6D426DAB6"
          ${{ env.BUILD_SH }} "pacman -Syyu --ask=4 arch-install-scripts cloud-guest-utils"
        shell: bash

      - name: Load devices.yaml
        run: |
          # Install yq to process YAML files in bash
          sudo snap install yq
          # Extract device-specific arrays from devices.yaml based on matrix DEVICE
          PACKAGES=$(yq '.devices["${{ matrix.DEVICE }}"].packages[]' devices.yaml | tr '\n' ' ')
          SERVICES=$(yq '.devices["${{ matrix.DEVICE }}"].services[]' devices.yaml | tr '\n' ' ')
          yq eval '.devices["${{ matrix.DEVICE }}"].config[]' devices.yaml | while IFS=": " read -r key value; do   
            key=$(echo $key | xargs);   
            value=$(echo $value | xargs | tr -d "'");   
            export "$key=$value";   
            echo "$key=$value" >> $GITHUB_ENV; 
            echo "$key=$value"
          done
          echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
          echo "SERVICES=$SERVICES" >> $GITHUB_ENV
          echo V_SD=$(losetup -f) >> $GITHUB_ENV
          echo IMG_NAME="ArchLinuxARM-qcom-${{ matrix.DEVICE }}-latest" >> $GITHUB_ENV
        shell: bash

      - name: prepare img file
        run: |
          dd if=/dev/zero of=${{ env.IMG_NAME }}.img bs=4K count=1024K
          sudo losetup --partscan ${{ env.V_SD }} ${{ env.IMG_NAME }}.img
          sudo parted -s ${{ env.V_SD }} mklabel gpt
          sudo parted -s ${{ env.V_SD }} mkpart primary fat32 2048s 411647s
          sudo parted -s ${{ env.V_SD }} name 1 boot
          sudo parted -s ${{ env.V_SD }} mkpart primary ext4 411648s 100%
          sudo parted -s ${{ env.V_SD }} name 2 rootfs
          sudo mkfs.vfat -F 32 ${{ env.V_SD }}p1
          sudo mkfs.ext4 ${{ env.V_SD }}p2
          sudo tune2fs -O ^has_journal ${{ env.V_SD }}p2
          sudo mount ${{ env.V_SD }}p2 ./builder/mnt
          sudo mkdir -p ./builder/mnt/boot
          sudo mount ${{ env.V_SD }}p1 ./builder/mnt/boot
        shell: bash

      - name: generate target
        run: |
          echo 0
          ${{ env.BUILD_SH }} "pacstrap -cGM /mnt ${{ env.PACKAGES }}"
          echo 1
          ${{ env.BUILD_SH }} "rm -f /mnt/etc/resolv.conf"
          echo 2
          ${{ env.BUILD_SH }} "ln -sf /run/systemd/resolve/resolv.conf /mnt/etc/resolv.conf"
          echo 3
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=en*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/en.network"
          echo 4
          ${{ env.BUILD_SH }} "echo -e '[Match]\nName=eth*\n\n[Network]\nDHCP=yes\nDNSSEC=no'>/mnt/etc/systemd/network/eth.network"
          echo 5
          ${{ env.BUILD_SH }} "echo '/dev/mmcblk0p1  /boot   vfat    defaults        0       0'>>/mnt/etc/fstab"
          echo 6
          ${{ env.BUILD_SH }} "echo 'alarm'>/mnt/etc/hostname"
          echo 7
          ${{ env.BUILD_SH }} "echo 'LANG=C'>/mnt/etc/locale.conf"
          echo 8
          ${{ env.BUILD_SH }} "useradd -d /home/alarm -m -U alarm --root /mnt"
          echo 9
          ${{ env.BUILD_SH }} "echo -e 'root:root\nalarm:alarm' | chpasswd --root /mnt"
          echo 10
          ${{ env.BUILD_SH }} "usermod -a -G wheel alarm --root /mnt"
          echo 11
          ${{ env.BUILD_SH }} "echo 'alarm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
          echo 12
          ${{ env.BUILD_SH }} "echo -n > /mnt/etc/machine-id"
          echo 13
          ${{ env.BUILD_SH }} "systemctl --root=/mnt enable ${{ env.SERVICES }}"
          echo 14
        shell: bash
      
      - name: Make Android Boot Image
        run: |
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools --depth=1
          mkdir out
          cp ./builder/mnt/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
          cp ./builder/mnt/boot/${{ env.KERNEL_RAMDISK_NAME }} out/ramdisk
          cp ./builder/mnt/boot/${{ env.KERNEL_DTB_NAME }} out/dtb
          tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o ${{ matrix.DEVICE }}-boot.img
          tools/mkbootimg.py ${{ env.ROOTFS_FORMAT_MKBOOTING }} -o ${{ matrix.DEVICE }}-rootfs-boot.img
          if [ -f ${{ matrix.DEVICE }}-boot.img ]; then
              echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
          else
              echo "Boot image is empty"
              exit 1
          fi
        shell: bash

      - name: clean and create compressed file
        run: |
          LC_ALL=C
          LANG=C
          LANGUAGE=
          sudo rm -rf ./builder/mnt/etc/*- ./builder/mnt/root/.bash_history ./builder/mnt/root/.gnupg ./builder/mnt/var/log/* ./builder/mnt/var/lib/systemd/*
          ${{ env.BUILD_SH }} "bsdtar --exclude 'lost+found' --exclude 'boot/System Volume Information' -czf /${{ env.IMG_NAME }}-rootfs.tar.gz -C /mnt/ ."
          sudo mv ./builder/${{ env.IMG_NAME }}-rootfs.tar.gz ./${{ env.IMG_NAME }}-rootfs.tar.gz
        shell: bash

      - name: create and enable resize2fs_once service
        run: |
          ${{ env.BUILD_SH }} "cp -f /usr/bin/growpart /mnt/usr/local/bin/growpart"
          ${{ env.BUILD_SH }} "curl -L -o /mnt/etc/systemd/system/resize2fs_once.service https://github.com/silime/ArchlinuxARM-qcom-aarch64/raw/main/resize2fs_once.service"
          ${{ env.BUILD_SH }} "curl -L -o /mnt/usr/local/bin/resize2fs_once.sh https://github.com/silime/ArchlinuxARM-qcom-aarch64/raw/main/resize2fs_once.sh"
          ${{ env.BUILD_SH }} "chmod a+x /mnt/usr/local/bin/growpart"
          ${{ env.BUILD_SH }} "chmod a+x /mnt/usr/local/bin/resize2fs_once.sh"
          ${{ env.BUILD_SH }} "systemctl --root=/mnt enable resize2fs_once.service"
        shell: bash

      - name: clean and package img file
        run: |
          ${{ env.BUILD_SH }} "rm -rf /mnt/etc/*- /mnt/root/.bash_history /mnt/root/.gnupg /mnt/var/log/* /mnt/var/lib/systemd/* "
          sudo umount -R ./builder/mnt
          sudo tune2fs -M / ${{ env.V_SD }}p2
          sudo e2fsck -yf -E discard ${{ env.V_SD }}p2
          sudo resize2fs -M ${{ env.V_SD }}p2
          sudo e2fsck -yf ${{ env.V_SD }}p2
          IMG_END=$(sudo fdisk -l -o end ${{ env.V_SD }} | sed -n '$p')
          sudo losetup -d ${{ env.V_SD }}
          sudo truncate --size=$[($IMG_END+1)*512] ${{ env.IMG_NAME }}.img
          zip ${{ env.IMG_NAME }}.img.zip ${{ env.IMG_NAME }}.img
        shell: bash

      - name: prepare release files
        run: |
          sha256sum ${{ env.IMG_NAME }}-rootfs.tar.gz > ./${{ env.IMG_NAME }}-rootfs.tar.gz.sha256sum
          sha256sum ${{ env.IMG_NAME }}.img.zip > ./${{ env.IMG_NAME }}.img.zip.sha256sum
          sha256sum ${{ matrix.DEVICE }}-boot.img > ./${{ matrix.DEVICE }}-boot.img.sha256sum
          sha256sum ${{ matrix.DEVICE }}-rootfs-boot.img > ./${{ matrix.DEVICE }}-rootfs-boot.img.sha256sum
        shell: bash

      - name: create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ env.RELEASE }}
          tag_name: ${{ env.RELEASE }}
          draft: false
          prerelease: false
          files: |
            ./${{ env.IMG_NAME }}-rootfs.tar.gz
            ./${{ env.IMG_NAME }}-rootfs.tar.gz.sha256sum
            ./${{ env.IMG_NAME }}.img.zip
            ./${{ env.IMG_NAME }}.img.zip.sha256sum
            ./${{ matrix.DEVICE }}-boot.img.sha256sum
            ./${{ matrix.DEVICE }}-boot.img
            ./${{ matrix.DEVICE }}-rootfs-boot.img.sha256sum
            ./${{ matrix.DEVICE }}-rootfs-boot.img

      - name: delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
